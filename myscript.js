var cord=[
	[2,2,226,2],
	[242,2,482,2],
	[2,18,50,18],
	[114,18,194,18],
	[226,18,290,18],
	[322,18,338,18],
	[370,18,402,18],
	[434,18,466,18],
	[18,34,82,34],
	[98,34,130,34],
	[162,34,178,34],
	[258,34,274,34],
	[322,34,354,34],
	[402,34,418,34],
	[450,34,482,34],
	[2,50,18,50],
	[50,50,66,50],
	[82,50,98,50],
	[114,50,130,50],
	[146,50,162,50],
	[194,50,226,50],
	[242,50,258,50],
	[274,50,306,50],
	[354,50,370,50],
	[386,50,418,50],
	[434,50,450,50],
	[466,50,482,50],
	[66,66,82,66],
	[98,66,114,66],
	[130,66,162,66],
	[226,66,274,66],
	[338,66,386,66],
	[418,66,466,66],
	[82,82,146,82],
	[178,82,194,82],
	[242,82,306,82],
	[322,82,386,82],
	[418,82,434,82],
	[466,82,482,82],
	[2,98,18,98],
	[50,98,82,98],
	[130,98,210,98],
	[258,98,274,98],
	[290,98,306,98],
	[338,98,354,98],
	[450,98,466,98],
	[18,114,34,114],
	[82,114,130,114],
	[146,114,178,114],
	[194,114,226,114],
	[322,114,354,114],
	[370,114,402,114],
	[418,114,482,114],
	[2,130,50,130],
	[66,130,98,130],
	[130,130,146,130],
	[162,130,194,130],
	[226,130,242,130],
	[258,130,306,130],
	[354,130,370,130],
	[402,130,418,130],
	[450,130,466,130],
	[34,146,82,146],
	[146,146,178,146],
	[210,146,226,146],
	[242,146,258,146],
	[290,146,338,146],
	[354,146,434,146],
	[18,162,50,162],
	[66,162,98,162],
	[130,162,194,162],
	[258,162,290,162],
	[306,162,354,162],
	[370,162,418,162],
	[450,162,466,162],
	[2,178,34,178],
	[50,178,82,178],
	[98,178,130,178],
	[146,178,194,178],
	[226,178,258,178],
	[290,178,322,178],
	[338,178,370,178],
	[418,178,434,178],
	[466,178,482,178],
	[34,194,82,194],
	[114,194,146,194],
	[178,194,242,194],
	[274,194,290,194],
	[322,194,338,194],
	[354,194,386,194],
	[402,194,466,194],
	[66,210,114,210],
	[210,210,226,210],
	[242,210,258,210],
	[306,210,354,210],
	[370,210,402,210],
	[418,210,434,210],
	[50,226,114,226],
	[258,226,290,226],
	[306,226,322,226],
	[354,226,386,226],
	[450,226,482,226],
	[2,242,98,242],
	[114,242,130,242],
	[146,242,162,242],
	[178,242,194,242],
	[290,242,306,242],
	[322,242,338,242],
	[386,242,402,242],
	[450,242,466,242],
	[34,258,50,258],
	[82,258,114,258],
	[130,258,146,258],
	[162,258,178,258],
	[194,258,242,258],
	[306,258,386,258],
	[418,258,482,258],
	[2,274,34,274],
	[66,274,98,274],
	[162,274,178,274],
	[210,274,306,274],
	[322,274,370,274],
	[386,274,434,274],
	[34,290,50,290],
	[82,290,162,290],
	[178,290,210,290],
	[226,290,258,290],
	[306,290,322,290],
	[370,290,386,290],
	[402,290,418,290],
	[18,306,34,306],
	[66,306,98,306],
	[130,306,194,306],
	[290,306,306,306],
	[354,306,466,306],
	[2,322,18,322],
	[50,322,82,322],
	[98,322,114,322],
	[178,322,194,322],
	[210,322,226,322],
	[242,322,258,322],
	[322,322,338,322],
	[370,322,386,322],
	[418,322,434,322],
	[466,322,482,322],
	[18,338,34,338],
	[50,338,130,338],
	[146,338,178,338],
	[210,338,274,338],
	[306,338,322,338],
	[354,338,418,338],
	[434,338,466,338],
	[2,354,18,354],
	[34,354,114,354],
	[130,354,162,354],
	[178,354,210,354],
	[306,354,354,354],
	[370,354,418,354],
	[450,354,466,354],
	[18,370,34,370],
	[66,370,82,370],
	[146,370,290,370],
	[322,370,338,370],
	[354,370,370,370],
	[434,370,450,370],
	[2,386,18,386],
	[50,386,66,386],
	[114,386,210,386],
	[226,386,242,386],
	[258,386,322,386],
	[338,386,354,386],
	[386,386,402,386],
	[418,386,434,386],
	[18,402,34,402],
	[130,402,162,402],
	[210,402,226,402],
	[274,402,290,402],
	[306,402,338,402],
	[402,402,450,402],
	[18,418,34,418],
	[50,418,130,418],
	[146,418,242,418],
	[274,418,338,418],
	[354,418,434,418],
	[2,434,18,434],
	[34,434,66,434],
	[146,434,162,434],
	[194,434,210,434],
	[242,434,258,434],
	[306,434,322,434],
	[370,434,386,434],
	[418,434,450,434],
	[18,450,34,450],
	[66,450,82,450],
	[114,450,162,450],
	[194,450,226,450],
	[242,450,290,450],
	[322,450,370,450],
	[450,450,482,450],
	[18,466,34,466],
	[82,466,98,466],
	[146,466,194,466],
	[210,466,242,466],
	[290,466,306,466],
	[386,466,418,466],
	[2,482,242,482],
	[258,482,482,482],
	[2,2,2,482],
	[18,66,18,98],
	[18,146,18,162],
	[18,178,18,226],
	[18,258,18,274],
	[18,290,18,306],
	[18,434,18,466],
	[34,34,34,114],
	[34,130,34,146],
	[34,210,34,242],
	[34,306,34,434],
	[50,50,50,98],
	[50,114,50,130],
	[50,162,50,178],
	[50,194,50,226],
	[50,258,50,338],
	[50,370,50,386],
	[50,402,50,418],
	[50,434,50,466],
	[66,2,66,34],
	[66,82,66,130],
	[66,146,66,162],
	[66,242,66,258],
	[66,274,66,306],
	[66,354,66,370],
	[66,386,66,418],
	[66,450,66,466],
	[82,18,82,50],
	[82,66,82,82],
	[82,178,82,194],
	[82,370,82,402],
	[82,418,82,450],
	[82,466,82,482],
	[98,2,98,34],
	[98,50,98,66],
	[98,98,98,114],
	[98,130,98,194],
	[98,242,98,258],
	[98,274,98,290],
	[98,354,98,418],
	[98,434,98,466],
	[114,34,114,50],
	[114,66,114,98],
	[114,114,114,162],
	[114,194,114,210],
	[114,226,114,242],
	[114,258,114,274],
	[114,290,114,322],
	[114,354,114,370],
	[114,386,114,402],
	[114,418,114,466],
	[130,50,130,66],
	[130,98,130,114],
	[130,146,130,194],
	[130,210,130,290],
	[130,306,130,386],
	[130,402,130,434],
	[130,466,130,482],
	[146,18,146,34],
	[146,114,146,146],
	[146,194,146,226],
	[146,274,146,290],
	[146,322,146,338],
	[146,418,146,434],
	[146,450,146,466],
	[162,34,162,50],
	[162,66,162,98],
	[162,178,162,258],
	[162,290,162,338],
	[178,34,178,82],
	[178,98,178,114],
	[178,194,178,242],
	[178,258,178,290],
	[178,386,178,450],
	[194,18,194,82],
	[194,114,194,162],
	[194,210,194,274],
	[194,322,194,354],
	[194,402,194,418],
	[194,434,194,482],
	[210,2,210,34],
	[210,66,210,98],
	[210,130,210,146],
	[210,162,210,194],
	[210,210,210,242],
	[210,274,210,306],
	[210,322,210,338],
	[210,354,210,370],
	[210,386,210,402],
	[226,18,226,66],
	[226,82,226,130],
	[226,146,226,178],
	[226,194,226,210],
	[226,226,226,258],
	[226,290,226,322],
	[226,338,226,354],
	[226,370,226,386],
	[226,434,226,450],
	[242,18,242,34],
	[242,98,242,162],
	[242,210,242,258],
	[242,306,242,322],
	[242,354,242,370],
	[242,386,242,482],
	[258,34,258,50],
	[258,82,258,130],
	[258,162,258,210],
	[258,226,258,258],
	[258,290,258,322],
	[258,338,258,354],
	[258,386,258,418],
	[258,466,258,482],
	[274,34,274,66],
	[274,114,274,162],
	[274,178,274,354],
	[274,402,274,418],
	[274,434,274,466],
	[290,2,290,34],
	[290,66,290,82],
	[290,98,290,114],
	[290,146,290,178],
	[290,210,290,226],
	[290,242,290,258],
	[290,290,290,370],
	[290,418,290,450],
	[290,466,290,482],
	[306,18,306,66],
	[306,98,306,130],
	[306,178,306,242],
	[306,258,306,274],
	[306,322,306,386],
	[306,434,306,466],
	[322,2,322,18],
	[322,34,322,130],
	[322,274,322,322],
	[322,386,322,402],
	[322,450,322,482],
	[338,50,338,66],
	[338,114,338,146],
	[338,178,338,194],
	[338,210,338,242],
	[338,290,338,338],
	[338,370,338,386],
	[338,402,338,434],
	[338,450,338,466],
	[354,2,354,50],
	[354,98,354,114],
	[354,130,354,178],
	[354,194,354,210],
	[354,242,354,258],
	[354,274,354,370],
	[354,386,354,450],
	[354,466,354,482],
	[370,18,370,34],
	[370,98,370,130],
	[370,210,370,242],
	[370,274,370,290],
	[370,370,370,402],
	[370,450,370,466],
	[386,34,386,98],
	[386,130,386,146],
	[386,162,386,194],
	[386,258,386,274],
	[386,322,386,338],
	[386,354,386,386],
	[386,402,386,418],
	[386,434,386,466],
	[402,18,402,34],
	[402,66,402,130],
	[402,162,402,258],
	[402,290,402,322],
	[402,370,402,402],
	[402,418,402,450],
	[418,2,418,34],
	[418,50,418,66],
	[418,98,418,114],
	[418,210,418,242],
	[418,322,418,338],
	[418,354,418,386],
	[418,434,418,466],
	[434,18,434,50],
	[434,82,434,178],
	[434,210,434,258],
	[434,274,434,306],
	[434,338,434,354],
	[434,450,434,482],
	[450,50,450,98],
	[450,130,450,210],
	[450,226,450,242],
	[450,258,450,290],
	[450,306,450,338],
	[450,354,450,466],
	[466,130,466,146],
	[466,194,466,210],
	[466,274,466,306],
	[466,354,466,434],
	[466,466,466,482],
	[482,2,482,482],
	];
var path = [
	[234,2],
	[234,10],
	[218,10],
	[218,42],
	[202,42],
	[202,10],
	[106,10],
	[106,26],
	[138,26],
	[138,58],
	[170,58],
	[170,90],
	[202,90],
	[202,58],
	[218,58],
	[218,74],
	[234,74],
	[234,90],
	[250,90],
	[250,138],
	[266,138],
	[266,154],
	[250,154],
	[250,170],
	[234,170],
	[234,138],
	[218,138],
	[218,122],
	[202,122],
	[202,186],
	[170,186],
	[170,250],
	[186,250],
	[186,282],
	[202,282],
	[202,266],
	[250,266],
	[250,218],
	[266,218],
	[266,170],
	[282,170],
	[282,186],
	[298,186],
	[298,234],
	[282,234],
	[282,266],
	[298,266],
	[298,250],
	[346,250],
	[346,234],
	[362,234],
	[362,250],
	[394,250],
	[394,266],
	[442,266],
	[442,298],
	[458,298],
	[458,266],
	[474,266],
	[474,314],
	[458,314],
	[458,330],
	[474,330],
	[474,346],
	[442,346],
	[442,362],
	[426,362],
	[426,346],
	[362,346],
	[362,362],
	[378,362],
	[378,410],
	[362,410],
	[362,378],
	[346,378],
	[346,362],
	[314,362],
	[314,378],
	[330,378],
	[330,394],
	[346,394],
	[346,442],
	[330,442],
	[330,426],
	[298,426],
	[298,458],
	[282,458],
	[282,474],
	[266,474],
	[266,458],
	[250,458],
	[250,482],
	[250,700]
];	
	
function interpolateColor(color1, color2, factor) {
    let result = color1.slice();
    for (let i = 0; i < 3; i++) {
        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));
    }
    return result;
}

function colorToHex(color) {
    return '#' + color.map(x => x.toString(16).padStart(2, '0')).join('');
}
function drawMaze(){
		const canvas = document.getElementById("canvas");
		const ctx = canvas.getContext("2d");
		console.log("maze "+cord.length);
		ctx.scale(0.5, 0.5);
		ctx.fillStyle = 'rgb(230, 228, 223)';
		ctx.fillRect(0, 0, 480, 480);
		ctx.beginPath();
		for(i=0;i<cord.length;i++){
		  console.log("maze2");
		  ctx.moveTo(cord[i][0],cord[i][1]);
		  ctx.lineTo(cord[i][2],cord[i][3]);
		 }
		 ctx.lineWidth = 2;
		 ctx.stroke();
		 console.log("maze3 "+cord.length);
	 }
	 
	 function line(ctx, i, path, color) {
		ctx.beginPath();
		ctx.moveTo(path[i][0], path[i][1]);
		ctx.lineTo(path[i + 1][0], path[i + 1][1]);
		ctx.lineWidth = 8;
		ctx.strokeStyle = color;
		ctx.stroke();
	}
	
			
		function drawPath(){
		const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");
        const drawDelay = 100;
        const eraseDelay = 80;
        const totalAnimationTime = path.length * drawDelay;
        document.querySelector('.water').classList.add('animate-water');
        var audio = new Audio('slike/MasinaZaKafe.mp3');
		audio.volume=0.15;
        audio.play();

        let startColor = [37, 150, 190];
        let endColor = [109, 34, 5];

        for (let i = 0; i < path.length - 1; i++) {
            let factor = i / (path.length - 2);
            let interpolatedColor = interpolateColor(startColor, endColor, factor);
            let colorHex = colorToHex(interpolatedColor);

            setTimeout(() => line(ctx, i, path, colorHex), i * drawDelay);
        }
        setTimeout(() => {
            for (let i = 0; i < path.length - 1; i++) {
                setTimeout(() => eraseLine(ctx, i, path), i * eraseDelay);
            }

            setTimeout(() => {
                audio.pause();
                audio.currentTime = 0;
            }, (path.length - 1) * eraseDelay);
        }, totalAnimationTime + 1000);
    }


function eraseLine(ctx, i, path) {
    drawMazeSegment(ctx, path[i], path[i + 1]);
}

function drawMazeSegment(ctx, startPoint, endPoint) {
	ctx.beginPath();
	ctx.moveTo(startPoint[0], startPoint[1]);
	ctx.lineTo(endPoint[0], endPoint[1]);
	ctx.lineWidth = 8;
	ctx.strokeStyle = 'rgb(230, 228, 223)';
	ctx.stroke();
}
function moveImageAlongPath() {
    const image = new Image();
    image.onload = function() {
        animate();
    };
    image.src = "slike/oblacek.png"; // Ensure the image is loaded before starting the animation

    const ch = document.getElementById("canvas2");
    const ctx2 = ch.getContext("2d");
    ctx2.scale(0.5, 0.5);

    const imgWidth = 25; // Adjust the width of your image
    const imgHeight = 25; // Adjust the height of your image

    let currentStep = 0;
    let stepX = path[1][0] - path[0][0];
    let stepY = path[1][1] - path[0][1];
    let progress = 0; // Progress towards the next point

    function animate() {
		if (currentStep >= path.length - 1) {
			ctx2.clearRect(0, 0, ch.width / ctx2.getTransform().a, ch.height / ctx2.getTransform().d); // Consider scaling
			console.log("Animation complete, canvas cleared");
			return; // Stop the animation
		}
	
		let currentPos = path[currentStep];
		let nextPos = path[currentStep + 1];
		let xPos = Math.round(currentPos[0] + progress * stepX);
		let yPos = Math.round(currentPos[1] + progress * stepY);
	
		ctx2.clearRect(0, 0, ch.width / ctx2.getTransform().a, ch.height / ctx2.getTransform().d); // Clear considering scaling
		ctx2.drawImage(image, xPos - imgWidth / 2, yPos - imgHeight / 2, imgWidth, imgHeight);
	

        progress += 0.1; // Update progress
        if (progress >= 1) {
            currentStep++; // Move to the next segment
            if (currentStep < path.length - 1) {
                stepX = path[currentStep + 1][0] - path[currentStep][0];
                stepY = path[currentStep + 1][1] - path[currentStep][1];
            }
            progress = 0;
        }

        requestAnimationFrame(animate);
    }

    image.onload = animate; // Start the animation once the image has loaded
}
